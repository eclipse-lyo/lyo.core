[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Michael Fiedler     - initial API and implementation for Bugzilla adapter
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     
 *******************************************************************************/
/]

[module generateService('org.eclipse.lyo.oslc4j.adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::jspServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourcePropertyServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderCatalogServices/]

[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceCollectionJsp/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateFilteredResourceCollectionJsp/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateGetResourceJsp/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceCreatorJsp/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceSelectorJsp/]

[template public generateService(aService : Service)]
[file (javaClassFullFileName(aService), false, 'UTF-8')]
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Michael Fiedler     - initial API and implementation for Bugzilla adapter
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package [javaClassPackageName(aService) /];


import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;

import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialogs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Preview;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.Link;

import [javaClassFullNameForAdaptorManager(containingAdaptorInterface(aService)) /];
import [javaInterfaceFullNameForAdaptorConstants(containingAdaptorInterface(aService)) /];
import [javaClassFullNameForSingleton(containingServiceProviderCatalog(aService)) /];
import [javaClassFullName(coveredResource(aService)) /];

[for (aProperty: ResourceProperty | allProperties(coveredResource(aService)))]
[if(Sequence{'Resource', 'LocalResource'}->includes(aProperty.valueType.toString())) ]
[if (not aProperty.range.oclIsUndefined())]
import [javaClassFullName(aProperty.range) /];	
[/if]
[/if]
[/for]


// [protected ('imports')]
// [/protected]


@OslcService([javaInterfaceNameForAdaptorConstants(containingAdaptorInterface(aService)) /].[domainSpecificationConstantName(aService.domainSpecification) /])
@Path("{serviceProviderId}/[coveredResource(aService).name.toLowerFirst() /]s")
public class [javaClassName(aService) /]
	
{

	@Context private HttpServletRequest httpServletRequest;
	@Context private HttpServletResponse httpServletResponse;
	@Context private UriInfo uriInfo;
	
    public [javaClassName(aService) /]()
    {
        super();
    }

    /**
     * RDF/XML, XML and JSON representation of a change request collection
     * 
     * TODO:  add query support
     * 
     * @param productId
     * @param where
     * @param pageString
     * @return
     * @throws IOException
     * @throws ServletException
     */
    
  @OslcDialogs(
    {
	[for (aSelectionDialog: Dialog | aService.selectionDialogs)]
        @OslcDialog
        (
             title = "[aSelectionDialog.title /]",
             label = "[aSelectionDialog.label /]",
			 [comment TODO: the URI should not be asked from the model. We should automatically deduce it here./]
             uri = "[aSelectionDialog.dialogURI /]",
             hintWidth = "[aSelectionDialog.hintWidth /]px",
             hintHeight = "[aSelectionDialog.hintHeight /]px",
             resourceTypes = {[for (aResource: Resource | aSelectionDialog.resourceTypes) separator(', ') ][javaInterfaceNameForAdaptorConstants(containingAdaptorInterface(aService)) /].[resourceTypeConstantName(aResource) /][/for]},
             usages = {OslcConstants.OSLC_USAGE_DEFAULT}
        )
	[/for]
    })   

	[for (aQueryCapability: QueryCapability | aService.queryCapabilities)]
	    @OslcQueryCapability
	    (
	        title = "[aQueryCapability.title /]",
	        label = "[aQueryCapability.label /]",
	        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + [javaInterfaceNameForAdaptorConstants(containingAdaptorInterface(aService)) /].[resourcePathConstantName(coveredResource(aService)) /],
	        resourceTypes = {[for (aResource: Resource | aQueryCapability.resourceTypes) separator(', ') ][javaInterfaceNameForAdaptorConstants(containingAdaptorInterface(aService)) /].[resourceTypeConstantName(aResource) /][/for]},
	        usages = {OslcConstants.OSLC_USAGE_DEFAULT}
	    ) 
	[/for]
      
    @GET
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public [javaClassName(coveredResource(aService)) /] [ '[]' /] get[coveredResource(aService).name.toUpperFirst() /]s(@PathParam("serviceProviderId")   final String serviceProviderId,
    		                                 		 @QueryParam("oslc.where") final String where,
    		                                 		 @QueryParam("page")       final String pageString) throws IOException, ServletException 
    {
    	int page=0;  
    	int limit=999;
        
		// [protected ('(MUST_FILL_IN) getResourceCollection_init')]
		// [/protected]

        final List<[javaClassName(coveredResource(aService)) /]> resources = [javaClassNameForAdaptorManager(containingAdaptorInterface(aService)) /].get[coveredResource(aService).name.toUpperFirst() /]s(httpServletRequest, serviceProviderId, page, limit);      
        return resources.toArray(new [javaClassName(coveredResource(aService)) /] [ '[' /]resources.size()[ ']' /]);
        

    }
    
    /**
     * HTML representation of change request collection
     * 
     * Forwards to changerequest_collection_html.jsp to build the html page
     * 
     * @param productId
     * @param changeRequestId
     * @param pageString
     * @return
     * @throws ServletException
     * @throws IOException
     */
    


	@GET
	@Produces({ MediaType.TEXT_HTML })
	public Response get[coveredResource(aService).name.toUpperFirst() /]sAsHtml(@PathParam("serviceProviderId")       final String serviceProviderId,
			                          @PathParam("[coveredResource(aService).name.toLowerFirst() /]Id") final String [coveredResource(aService).name.toLowerFirst() /]Id,
			                          @QueryParam("page")           final String pageString) throws ServletException, IOException
	{
		int page=0;
		int limit=20;
		
		if (null != pageString) {
			page = Integer.parseInt(pageString);
		}

		// [protected ('(MUST_FILL_IN) getResourceCollectionAsHTML_init')]
		// [/protected]

        final List<[javaClassName(coveredResource(aService)) /]> resources = [javaClassNameForAdaptorManager(containingAdaptorInterface(aService)) /].get[coveredResource(aService).name.toUpperFirst() /]s(httpServletRequest, serviceProviderId, page, limit);      
		
        if (resources!= null) {
        	httpServletRequest.setAttribute("resources", resources);
			// [protected ('(RECOMMENDED) getResourceCollectionAsHTML_setAttributes')]
			// [/protected]

        	httpServletRequest.setAttribute("queryUri", 
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
        	if (resources.size() > limit) {
        		resources.remove(resources.size() - 1);
        		httpServletRequest.setAttribute("nextPageUri", 
        				uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
        	}
        	
        	ServiceProvider serviceProvider = [javaClassNameForSingleton(containingServiceProviderCatalog(aService)) /].getServiceProvider(httpServletRequest, serviceProviderId);
        	httpServletRequest.setAttribute("serviceProvider", serviceProvider);

        	RequestDispatcher rd = httpServletRequest.getRequestDispatcher("[resourceCollectionJspRelativeFileName(coveredResource(aService)) /]");
			[coveredResource(aService).generateResourceCollectionJsp() /]
        	rd.forward(httpServletRequest,httpServletResponse);
        }
		
		throw new WebApplicationException(Status.NOT_FOUND);	
	}


    
	/**
	 * RDF/XML, XML and JSON representation of a single change request
	 * 
	 * @param productId
	 * @param changeRequestId
	 * @return
	 * @throws IOException
	 * @throws ServletException
	 * @throws URISyntaxException
	 */
    


    @GET
    @Path("{[coveredResource(aService).name.toLowerFirst() /]Id}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public [javaClassName(coveredResource(aService)) /] get[coveredResource(aService).name.toUpperFirst() /](@PathParam("serviceProviderId")       final String serviceProviderId,
                                                  @PathParam("[coveredResource(aService).name.toLowerFirst() /]Id") final String [coveredResource(aService).name.toLowerFirst() /]Id) throws IOException, ServletException, URISyntaxException
    {
	
		// [protected ('(MUST_FILL_IN) getResource_init')]
		// [/protected]

        final [javaClassName(coveredResource(aService)) /] a[coveredResource(aService).name.toUpperFirst() /] = [javaClassNameForAdaptorManager(containingAdaptorInterface(aService)) /].get[coveredResource(aService).name.toUpperFirst() /](httpServletRequest, [coveredResource(aService).name.toLowerFirst() /]Id, serviceProviderId);

        if (a[coveredResource(aService).name.toUpperFirst() /] != null) {
			// [protected ('(RECOMMENDED) getResource_body')]
			// [/protected]

            return a[coveredResource(aService).name.toUpperFirst() /];
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }



    
    /**
     * 
     * HTML representation for a single change request  - redirect the request directly to Bugzilla
     * 
     * @param productId
     * @param changeRequestId
     * @throws ServletException
     * @throws IOException
     * @throws URISyntaxException
     */
    


	@GET
	@Path("{[coveredResource(aService).name.toLowerFirst() /]Id}")
	@Produces({ MediaType.TEXT_HTML })
	public Response get[coveredResource(aService).name.toUpperFirst() /]AsHtml(@PathParam("serviceProviderId")       final String serviceProviderId,
			                         @PathParam("[coveredResource(aService).name.toLowerFirst() /]Id") final String [coveredResource(aService).name.toLowerFirst() /]Id) throws ServletException, IOException, URISyntaxException
	{	
		// [protected ('(MUST_FILL_IN) getResourceAsHTML_init')]
		// [/protected]

        final [javaClassName(coveredResource(aService)) /] a[coveredResource(aService).name.toUpperFirst() /] = [javaClassNameForAdaptorManager(containingAdaptorInterface(aService)) /].get[coveredResource(aService).name.toUpperFirst() /](httpServletRequest, [coveredResource(aService).name.toLowerFirst() /]Id, serviceProviderId);

        if (a[coveredResource(aService).name.toUpperFirst() /] != null) {
        	httpServletRequest.setAttribute("a[coveredResource(aService).name.toUpperFirst() /]", a[coveredResource(aService).name.toUpperFirst() /]);
			// [protected ('getResourceAsHTML_setAttributes')]
			// [/protected]

         	ServiceProvider serviceProvider = [javaClassNameForSingleton(containingServiceProviderCatalog(aService)) /].getServiceProvider(httpServletRequest, serviceProviderId);
        	httpServletRequest.setAttribute("serviceProvider", serviceProvider);

        	RequestDispatcher rd = httpServletRequest.getRequestDispatcher("[getResourceJspRelativeFileName(coveredResource(aService)) /]");
			[coveredResource(aService).generateGetResourceJsp() /]
        	rd.forward(httpServletRequest,httpServletResponse);


		}

        throw new WebApplicationException(Status.NOT_FOUND);
	}

	
	/**
	 * OSLC delegated selection dialog for change requests
	 * 
	 * If called without a "terms" parameter, forwards to changerequest_selector.jsp to 
	 * build the html for the IFrame
	 * 
	 * If called with a "terms" parameter, sends a Bug search to Bugzilla and then 
	 * forwards to changerequest_filtered_json.jsp to build a JSON response
	 * 
	 * 
	 * @param terms
	 * @param productId
	 * @throws ServletException
	 * @throws IOException
	 */
	
	@GET
	@Path("selector")
	@Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
	public void [coveredResource(aService).name.toLowerFirst() /]Selector(@QueryParam("terms")     final String terms,
						              @PathParam("serviceProviderId")  final String serviceProviderId) throws ServletException, IOException
	{
		try {
			// [protected ('(MUST_FILL_IN) resourceSelector_init')]
			// [/protected]

			ServiceProvider serviceProvider = [javaClassNameForSingleton(containingServiceProviderCatalog(aService)) /].getServiceProvider(httpServletRequest, serviceProviderId);
			httpServletRequest.setAttribute("serviceProvider", serviceProvider);
			httpServletRequest.setAttribute("selectionUri",uriInfo.getAbsolutePath().toString());
			// [protected ('(RECOMMENDED) resourceSelector_setAttributes')]
			// [/protected]

			if (terms != null ) {
				httpServletRequest.setAttribute("terms", terms);
				final List<[javaClassName(coveredResource(aService)) /]> resources = [javaClassNameForAdaptorManager(containingAdaptorInterface(aService)) /].search[coveredResource(aService).name.toUpperFirst() /]s(httpServletRequest, serviceProviderId, terms);      
				if (resources!= null) {
							httpServletRequest.setAttribute("resources", resources);
							RequestDispatcher rd = httpServletRequest.getRequestDispatcher("[filteredResourceCollectionJspRelativeFileName(coveredResource(aService)) /]"); 
							[coveredResource(aService).generateFilteredResourceCollectionJsp() /]
							rd.forward(httpServletRequest, httpServletResponse);
				}
				//a empty search should return an empty list and not NULL!
				throw new WebApplicationException(Status.NOT_FOUND);	
			
			} else {
				try {	
					RequestDispatcher rd = httpServletRequest.getRequestDispatcher("[resourceSelectorJspRelativeFileName(coveredResource(aService)) /]"); 
					[coveredResource(aService).generateResourceSelectorJsp() /]
					rd.forward(httpServletRequest, httpServletResponse);
					
				} catch (Exception e) {
					throw new ServletException(e);
				}
			}
		} catch (Exception e) {
			throw new WebApplicationException(e);
		}

	}
	
    
    /**
     * OSLC delegated creation dialog for a single change request
     * 
     * Forwards to changerequest_creator.jsp to build the html form
     * 
     * @param productId
     * @throws IOException
     * @throws ServletException
     */
	
    @GET
    @Path("creator") 
    @Consumes({MediaType.WILDCARD})
    public void [coveredResource(aService).name.toLowerFirst() /]CreatorAsHtml(@PathParam("serviceProviderId") final String serviceProviderId) throws IOException, ServletException
    {
		// [protected ('(MUST_FILL_IN) resourceCreatorAsHTML_init')]
		// [/protected]

		ServiceProvider serviceProvider = [javaClassNameForSingleton(containingServiceProviderCatalog(aService)) /].getServiceProvider(httpServletRequest, serviceProviderId);
		httpServletRequest.setAttribute("serviceProvider", serviceProvider);

		RequestDispatcher rd = httpServletRequest.getRequestDispatcher("[resourceCreatorJspRelativeFileName(coveredResource(aService)) /]");
		[coveredResource(aService).generateResourceCreatorJsp() /]
		rd.forward(httpServletRequest, httpServletResponse);
    }
	

    /**
     * Backend creator for the OSLC delegated creation dialog. 
     * 
     * Accepts the input in FormParams and returns a small JSON response
     * 
     * @param productId
     * @param component
     * @param version
     * @param summary
     * @param op_sys
     * @param platform
     * @param description
     */
    @POST
    @Path("creator") 
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void create[coveredResource(aService).name.toUpperFirst() /](@PathParam("serviceProviderId")   final String serviceProviderId)
    {
    	try {
    		[javaClassName(coveredResource(aService)) /] a[coveredResource(aService).name.toUpperFirst() /] = new [javaClassName(coveredResource(aService)) /]();

    		String['[]'/] paramValues;

			[comment TODO: Check for valid parameters (1) that the oneOrMore, or oneOrMany are set. (2) things have right format. (3) Allow end_user to also add own checks 
			In the Resource class, automtiacally generate a "propertyValidValue" (similar to propertyAsHtmlForCreation) for each of the properties. 
			There you can add all automatic checks, as well as allow for end-user ones./]
			[for (aProperty: ResourceProperty | allProperties(coveredResource(aService)))]
				paramValues = httpServletRequest.getParameterValues("[aProperty.name /]");
				if (paramValues != null) {
					[if (Sequence{'zeroOrMany', 'oneOrMany'}->includes(aProperty.occurs.toString()))]
			    		for(int i=0; i<paramValues.length; i++) {
							a[coveredResource(aService).name.toUpperFirst() /].add[aProperty.name.toUpperFirst() /]([javaAttributeBaseTypeCastFromString(aProperty, 'paramValues[i]') /]);
						}
					[else]
						if (paramValues.length == 1) {
							if (paramValues['[0]'/].length() != 0)
								a[coveredResource(aService).name.toUpperFirst() /].set[javaAttributeName(aProperty, coveredResource(aService)).toUpperFirst() /]([javaAttributeBaseTypeCastFromString(aProperty, 'paramValues[0]') /]);
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
					[/if]
				}			
			[/for]

      
    		final [javaClassName(coveredResource(aService)) /] new[coveredResource(aService).name.toUpperFirst() /] = [javaClassNameForAdaptorManager(containingAdaptorInterface(aService)) /].create[coveredResource(aService).name.toUpperFirst() /](httpServletRequest, a[coveredResource(aService).name.toUpperFirst() /], serviceProviderId);
   		
    		httpServletRequest.setAttribute("newResource", new[coveredResource(aService).name.toUpperFirst() /]);
    		httpServletRequest.setAttribute("newResourceUri", new[coveredResource(aService).name.toUpperFirst() /].getAbout().toString());

    		// Send back to the form a small JSON response
    		httpServletResponse.setContentType("application/json");
    		httpServletResponse.setStatus(Status.CREATED.getStatusCode());
    		httpServletResponse.addHeader("Location", new[coveredResource(aService).name.toUpperFirst() /].getAbout().toString());
    		PrintWriter out = httpServletResponse.getWriter();
			[comment TODO: What should be outputed as a result? Is this even necessary? /]
    		out.print("{" + "\"resource\" : \"" + new[coveredResource(aService).name.toUpperFirst() /].getAbout().toString() + "\"}");
    		out.close();
    	} catch (Exception e) {
    		e.printStackTrace();
    		throw new WebApplicationException(e);
    	}

    }

	/**
	 * Create a single BugzillaChangeRequest via RDF/XML, XML or JSON POST
	 * @param productId
	 * @param changeRequest
	 * @return
	 * @throws IOException
	 * @throws ServletException
	 */

	[for (aCreationDialog: Dialog | aService.creationDialogs)]
		 @OslcDialog
		(
             title = "[aCreationDialog.title /]",
             label = "[aCreationDialog.label /]",
			 [comment TODO: the URI should not be asked from the model. We should automatically deduce it here./]
             uri = "[aCreationDialog.dialogURI /]",
             hintWidth = "[aCreationDialog.hintWidth /]px",
             hintHeight = "[aCreationDialog.hintHeight /]px",
             resourceTypes = {[for (aResource: Resource | aCreationDialog.resourceTypes) separator(', ') ][javaInterfaceNameForAdaptorConstants(containingAdaptorInterface(aService)) /].[resourceTypeConstantName(aResource) /][/for]},
             usages = {OslcConstants.OSLC_USAGE_DEFAULT}
		)
	[/for]

	[for (aCreationFactory: CreationFactory | aService.creationFactories)]
		@OslcCreationFactory
		(
			 title = "[aCreationFactory.title /]",
			 label = "[aCreationFactory.label /]",
			 resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + [javaInterfaceNameForAdaptorConstants(containingAdaptorInterface(aService)) /].[resourcePathConstantName(coveredResource(aService)) /]},
			 resourceTypes = {[for (aResource: Resource | aCreationFactory.resourceTypes) separator(', ') ][javaInterfaceNameForAdaptorConstants(containingAdaptorInterface(aService)) /].[resourceTypeConstantName(aResource) /][/for]},
			 usages = {OslcConstants.OSLC_USAGE_DEFAULT}
		)
	[/for]

    @POST
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public Response addChangeRequest(@PathParam("productId") final String productId,
                                                             final [javaClassName(coveredResource(aService)) /] a[coveredResource(aService).name.toUpperFirst() /]) throws IOException, ServletException

    {
    	
    	return null; // See LAB 5 of the Lyo workshop for implementation
    }

	// [protected ('(RECOMMENDED) functions')]
	// [/protected]

}


[/file]
[/template]
