[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *	   Sam Padgett	        - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Resource containing specific methods for its managing Service Provider
 *							- Use of Adapator Interface Generator
 *     Anass Radouani       - Resource containing specific methods for its managing Service Provider
 *							- Use of Adapator Interface Generator
 *******************************************************************************/
/]

[module generateResourceForSP('http://org.eclipse.lyo/oslc4j/adaptorInterface', 'http://org.eclipse.lyo/oslc4j/adaptorInterfaceGenerator')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourcePropertyServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::domainSpecificationServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderServices/]

[template public generateResourceForSP(aResource : Resource, anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aServiceProvider : ServiceProvider)]
[file (javaClassFullFileName(aResource, aServiceProvider, anAdaptorInterfaceGenerator), false, 'UTF-8')]
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *	   Sam Padgett	        - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Resource containing specific methods for its managing Service Provider
 *     Anass Radouani       - Resource containing specific methods for its managing Service Provider 
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/


package [javaClassPackageName(aResource, anAdaptorInterfaceGenerator) /];

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;

import [javaClassFullName(aResource, anAdaptorInterfaceGenerator)/];
import [javaClassFullNameForAdaptorServletListener(anAdaptorInterfaceGenerator) /]; 
import [javaInterfaceFullNameForAdaptorConstants(anAdaptorInterfaceGenerator) /];
[for (aProperty: ResourceProperty | allProperties(aResource)->sortedBy(name))]
[if(Sequence{'Resource', 'LocalResource'}->includes(aProperty.valueType.toString())) ]
[if (not aProperty.range.oclIsUndefined())]
import [javaClassFullName(aProperty.range, anAdaptorInterfaceGenerator) /];	
[/if]
[/if]
[/for]

// [protected ('imports')]
// [/protected]

@OslcNamespace([javaInterfaceNameForAdaptorConstants(anAdaptorInterfaceGenerator.adaptorInterface) /].[domainSpecificationNamespaceConstantName(aResource.definingDomainSpecification()) /])
@OslcName([javaInterfaceNameForAdaptorConstants(anAdaptorInterfaceGenerator.adaptorInterface) /].[resourceConstantName(aResource) /]) 
@OslcResourceShape(title = "[aResource.name /] Resource Shape", describes = [javaInterfaceNameForAdaptorConstants(anAdaptorInterfaceGenerator.adaptorInterface) /].[resourceTypeConstantName(aResource) /])
public class [javaClassName(aResource, aServiceProvider) /]
       extends [javaClassName(aResource) /]
{


public [javaClassName(aResource, aServiceProvider) /]()
       throws URISyntaxException
{
    super();

	// [protected ('constructor1')]
	// [/protected]
}

public [javaClassName(aResource, aServiceProvider) /](final URI about)
       throws URISyntaxException
{
    super(about);

	// [protected ('constructor2')]
	// [/protected]
}

public [javaClassName(aResource, aServiceProvider) /]([commaSeparate(aResource.instanceMethodSignature(aServiceProvider), false, false)/])
       throws URISyntaxException
{
	this (constructURI([commaSeparate(aResource.instanceMethodParameterList(aServiceProvider), false, false)/]));
	// [protected ('constructor3')]
	// [/protected]
}

public static URI constructURI([commaSeparate(aResource.instanceMethodSignature(aServiceProvider), false, false)/])
{
    String basePath = [javaClassNameForAdaptorServletListener(anAdaptorInterfaceGenerator.adaptorInterface) /].getServicesBase();
    Map<String, Object> pathParameters = new HashMap<String, Object>();
    [for (instanceCompositeID: String | aResource.instanceCompositeID(aServiceProvider)) separator(lineSeparator())]
    pathParameters.put("[instanceCompositeID /]", [instanceCompositeID /]);
    [/for]
    String instanceURI = "[aResource.instanceURI(aServiceProvider) /]";
  
    final UriBuilder builder = UriBuilder.fromUri(basePath);
    return builder.path(instanceURI).buildFromMap(pathParameters);
}

public static Link constructLink([commaSeparate(aResource.instanceMethodSignature(aServiceProvider), false, true)/] final String label)
{
	return new Link(constructURI([commaSeparate(aResource.instanceMethodParameterList(aServiceProvider), false, false)/]), label);
}

public static Link constructLink([commaSeparate(aResource.instanceMethodSignature(aServiceProvider), false, false)/])
{
	return new Link(constructURI([commaSeparate(aResource.instanceMethodParameterList(aServiceProvider), false, false)/]));
}

[for (aProperty: ResourceProperty | aResource.allProperties())]
    static public String [javaAttributeName(aProperty, aResource) /]ToHtmlForCreation (final HttpServletRequest httpServletRequest[commaSeparate(aResource.collectionMethodSignature(aServiceProvider), true, false)/])
    {
		String s = "";

		// [protected (javaAttributeName(aProperty, aResource).concat('asHtmlForCreation_init'))]
		// [/protected]

		s = s + "<label for=\"[aProperty.name/]\">[aProperty.name/]: </LABEL>";

		// [protected (javaAttributeName(aProperty, aResource).concat('asHtmlForCreation_mid'))]
		// [/protected]

		[let valueType : String = aProperty.valueType.toString()]
			[if (Sequence{'String', 'XMLLiteral', 'DateTime', 'URI'}->includes(valueType))]
				s= s + [resourcePropertyAsTextInputForCreation(aProperty) /];
			[elseif(valueType = 'Boolean')]
				s= s + "<input name=\"[aProperty.name/]\" type=\"radio\" value=\"true\">True<br><input name=\"[aProperty.name/]\" type=\"radio\" value=\"false\">False";
			[elseif(Sequence{'Resource', 'LocalResource'}->includes(valueType))]
					[comment TODO: How to deal with properties that are resources? Should then also be created, or should hte user get a list of existing such resources to choose from. 
					Latter sounds most reasonable. For now just ignore such properties./]
			[/if]
		[/let]

		// [protected (javaAttributeName(aProperty, aResource).concat('asHtmlForCreation_finalize'))]
		// [/protected]

		return s; 
    }
[/for]
}

[/file]
[/template]


[template public resourcePropertyAsTextInputForCreation(aProperty: ResourceProperty)]
"<input name=\"[aProperty.name/]\" type=\"text\" style=\"width: 400px\" id=\"[aProperty.name/]\" [if (Sequence{'excatlyOne', 'oneOrMany'}->includes(aProperty.occurs.toString()))]required[/if]>"
[/template]

