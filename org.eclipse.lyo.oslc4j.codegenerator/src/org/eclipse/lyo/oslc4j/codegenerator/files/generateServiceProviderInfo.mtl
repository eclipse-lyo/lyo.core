[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *	   Matthieu Helleboid	- Use of Adapator Interface Generator
 *							- Add constructServiceProviderURI method originaly in Service Provider Catalog Singleton
 *	   Anass Radouani		- Use of Adapator Interface Generator
 *							- Add constructServiceProviderURI method originaly in Service Provider Catalog Singleton
 *     
 *******************************************************************************/
/]

[module generateServiceProviderInfo('http://org.eclipse.lyo/oslc4j/adaptorInterface', 'http://org.eclipse.lyo/oslc4j/adaptorInterfaceGenerator')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderServices/]

[template public generateServiceProviderInfo(aServiceProvider : ServiceProvider, anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator)]
[file (javaClassFullFileNameForServiceProviderInfo(aServiceProvider, anAdaptorInterfaceGenerator), false, 'UTF-8')]
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *	   Matthieu Helleboid	- Add constructServiceProviderURI method originaly in Service Provider Catalog Singleton
 *	   Anass Radouani		- Add constructServiceProviderURI method originaly in Service Provider Catalog Singleton
 *     
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package [javaClassPackageNameForServiceProviderInfo(anAdaptorInterfaceGenerator) /];

import java.net.URI;
import java.util.HashMap;
import java.util.Map;

import javax.ws.rs.core.UriBuilder;

import [javaClassFullNameForAdaptorServletListener(anAdaptorInterfaceGenerator) /];

// [protected ('imports')]
// [/protected]


// [protected ('pre_class_code')]
// [/protected]

public class [javaClassNameForServiceProviderInfo(aServiceProvider) /] {

    public String name;
    [for (instanceCompositeID: String | instanceCompositeID(aServiceProvider)) separator(';'.concat(lineSeparator()))]
    public String [instanceCompositeID /];
    [/for]

	// [protected ('class_attributes')]
	// [/protected]

	// [protected ('class_methods')]
	// [/protected]

    public static URI constructServiceProviderURI([aServiceProvider.instanceMethodSignature() /])
    {
        String basePath = [javaClassNameForAdaptorServletListener(anAdaptorInterfaceGenerator.adaptorInterface) /].getServicesBase();
        Map<String, Object> pathParameters = new HashMap<String, Object>();
        [for (instanceCompositeID: String | aServiceProvider.instanceCompositeID()) separator(lineSeparator())]
        pathParameters.put("[instanceCompositeID /]", [instanceCompositeID /]);
        [/for]
        String instanceURI = "[aServiceProvider.instanceURI() /]";
      
        final UriBuilder builder = UriBuilder.fromUri(basePath);
        return builder.path(instanceURI).buildFromMap(pathParameters);
    }

}

[/file]
[/template]
