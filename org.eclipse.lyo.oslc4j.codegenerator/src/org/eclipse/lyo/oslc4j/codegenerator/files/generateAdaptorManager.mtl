[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *******************************************************************************/
/]

[module generateAdaptorManager('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderCatalogServices/]

[query public backendCode(backendCodeTemplate : String, aResource : Resource) : String = 
(if (not backendCodeTemplate.oclIsUndefined()) then
	backendCodeTemplate
		.substituteAll('[ResourceClassName/]', javaClassName(aResource))
		.substituteAll('[ResourceInstanceName/]', javaInstanceName(aResource))
else
    ''
endif)
/]

[query public getResourceBackendCode(anAdaptorInterface : AdaptorInterface, aResource : Resource) : String = 
backendCode(anAdaptorInterface.backendCodeTemplate_getResource, aResource)
/]

[query public getResourcesBackendCode(anAdaptorInterface : AdaptorInterface, aResource : Resource) : String = 
backendCode(anAdaptorInterface.backendCodeTemplate_getResources, aResource)
/]

[query public searchResourcesBackendCode(anAdaptorInterface : AdaptorInterface, aResource : Resource) : String = 
backendCode(anAdaptorInterface.backendCodeTemplate_searchResources, aResource)
/]

[query public createResourceBackendCode(anAdaptorInterface : AdaptorInterface, aResource : Resource) : String = 
backendCode(anAdaptorInterface.backendCodeTemplate_createResource, aResource)
/]

[template public generateAdaptorManager(anAdaptorInterface : AdaptorInterface)]
[file (javaClassFullFileNameForAdaptorManager(anAdaptorInterface), false, 'UTF-8')]
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package [javaClassPackageNameForAdaptorManager(anAdaptorInterface) /];

import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import [javaClassFullNameForSingleton(anAdaptorInterface.serviceProviderCatalog) /];

[for (aServiceProvider: ServiceProvider | anAdaptorInterface.serviceProviderCatalog.serviceProviders)]
import [javaClassFullNameForServiceProviderInfo(aServiceProvider) /];
[/for]
[for (aResource: Resource | relevantResources(anAdaptorInterface)->sortedBy(name))]
import [javaClassFullName(aResource, anAdaptorInterface) /];
[/for]

// [protected ('imports')]
// [/protected]


// [protected ('pre_class_code')]
// [/protected]

public class [javaClassNameForAdaptorManager(anAdaptorInterface) /] {

	// [protected ('class_attributes')]
	// [/protected]
	
	// [protected ('class_methods')]
	// [/protected]


    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
		[comment TODO: {PATTERNS} there could be a pattern we can further develop on for file-based vs. database/web base tools.
		A pattern on how to esablish the connection between the adaptor and the tool.		
		For file-based tools, you would want to establish a single connection between the adaptor and the tool, 
		with which you can handle all calls from all users/sessions. Otherwise, it is a challenge if 2 sessions/connections
		want to access the same file. Such tools are not made for multiple users at the same time.
		Such single connection can be created here in contextInitialized.
		For web/database-based tools, you would want to establish a connection from adaptor to tool for each session/tool.
		Such tools are used to handle multiple connections from different users at the same time.
		The model for how to establish such session-based connections can be borrowed from the Lyo CM Workshop.
		/]
		// TODO Implement code to establish connection to data backbone etc ...
		// [protected ('contextInitializeServletListener')]
		// [/protected]
    }

	public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
	{
		// TODO Implement code to shutdown connections to data backbone etc...
		// [protected ('contextDestroyed')]
		// [/protected]
	}

	[comment TODO: {PATTERNS} generate Genric code that allows developer to create/store identifiers persistently in a database.
	This would allow for the persistent mapping from URIs to specifiic internal data elements.
	This is for identifiers of the serviceProviders, as well as for individual resources.
	/]

	[comment TODO: {PATTERNS} generate Genric code that allows developer to cache resources.
	/]

    [for (aServiceProvider: ServiceProvider | anAdaptorInterface.serviceProviderCatalog.serviceProviders)]
    public static [javaClassNameForServiceProviderInfo(aServiceProvider) /] [ '[' ']' /] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
		[javaClassNameForServiceProviderInfo(aServiceProvider) /] [ '[' ']' /] serviceProviderInfos = {};
		// TODO Implement code to return the set of ServiceProviders
		// [protected ('getServiceProviderInfos userCode')]
		// [/protected]
		return serviceProviderInfos;
    }
    [/for]

	[for (aResource: Resource | servicedResources(anAdaptorInterface)->sortedBy(name))]
    public static [javaClassName(aResource) /] get[aResource.name.toUpperFirst() /](HttpServletRequest httpServletRequest[commaSeparate(instanceMethodSignature(aResource, anAdaptorInterface), true, false)/])
    {
		[javaClassName(aResource) /] a[aResource.name.toUpperFirst() /] = null;
		// TODO Implement code to return a resource
		[anAdaptorInterface.getResourceBackendCode(aResource) /]
		// [protected ('get'.concat(aResource.name.toUpperFirst()).concat(' userCode'))]
		// [/protected]
		return a[aResource.name.toUpperFirst() /];
    }

    public static List<[javaClassName(aResource) /]> get[aResource.name.toUpperFirst() /]s(HttpServletRequest httpServletRequest[commaSeparate(collectionMethodSignature(aResource, anAdaptorInterface), true, false)/], int page, int limit)
    {
		List<[javaClassName(aResource) /]> [aResource.name.toLowerFirst() /]s = null;
		// TODO Implement code to return a set of resources
		[anAdaptorInterface.getResourcesBackendCode(aResource) /]
		// [protected ('get'.concat(aResource.name.toUpperFirst()).concat('s userCode'))]
		// [/protected]
		return [aResource.name.toLowerFirst() /]s;
    }

    public static List<[javaClassName(aResource) /]> search[aResource.name.toUpperFirst() /]s(HttpServletRequest httpServletRequest[commaSeparate(collectionMethodSignature(aResource, anAdaptorInterface), true, false)/], String terms)
    {
		List<[javaClassName(aResource) /]> [aResource.name.toLowerFirst() /]s = null;
		// TODO Implement code to return a set of resources, based on search criteria 
		[anAdaptorInterface.searchResourcesBackendCode(aResource) /]
		// [protected ('search'.concat(aResource.name.toUpperFirst()).concat('s userCode'))]
		// [/protected]
		return [aResource.name.toLowerFirst() /]s;
    }

    public static [javaClassName(aResource) /] create[aResource.name.toUpperFirst() /](HttpServletRequest httpServletRequest, final [javaClassName(aResource) /] a[aResource.name.toUpperFirst()/][commaSeparate(collectionMethodSignature(aResource, anAdaptorInterface), true, false)/])
    {
		[javaClassName(aResource) /] new[aResource.name.toUpperFirst() /] = null;
		// TODO Implement code to create a resource
		[anAdaptorInterface.createResourceBackendCode(aResource) /]
		// [protected ('create'.concat(aResource.name.toUpperFirst()).concat(' userCode'))]
		// [/protected]
		return new[aResource.name.toUpperFirst() /];
    }

    public static String getETagFrom[aResource.name.toUpperFirst() /](final [javaClassName(aResource) /] a[aResource.name.toUpperFirst() /])
    {
		String eTag = null;
		// TODO Implement code to return an ETag for a particular resource
		// [protected ('getETagFrom'.concat(aResource.name.toUpperFirst()).concat(' userCode'))]
		// [/protected]
		return eTag;
    }

    public static ServiceProvider get[aResource.name.toUpperFirst() /]sManagingServiceProvider(HttpServletRequest httpServletRequest, final [javaClassName(aResource) /] a[aResource.name.toUpperFirst()/][commaSeparate(instanceMethodSignature(aResource, anAdaptorInterface), true, false)/])
    {
        ServiceProvider aServiceProvider = null;
        [if (aResource.serviceNamespaceRelativeToServiceProvider(anAdaptorInterface))]
        //aServiceProvider can be deduced automatically, since the resource's id is relative to that of its serviceProvider.
        aServiceProvider = [javaClassNameForSingleton(anAdaptorInterface.serviceProviderCatalog) /].getServiceProvider(httpServletRequest[commaSeparate(instanceMethodParameterList(managingServiceProviders(aResource, anAdaptorInterface)->any(true)), true, false)/]);
        [/if]
		// TODO Implement code to return a resource's serviceProvider
        // [protected ('get'.concat(aResource.name.toUpperFirst()).concat('sManagingServiceProvider userCode'))]
        // [/protected]
        return aServiceProvider;
    }

	[/for]

}

[/file]
[/template]
