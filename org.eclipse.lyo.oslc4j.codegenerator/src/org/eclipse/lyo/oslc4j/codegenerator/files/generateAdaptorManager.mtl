[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury       - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid  - Add Service Provider title to getServiceProviderInfos method
 *						   - Add Specific methods for each managed Resource that has its service namespace relative to Service Provider
 *						   - Import the Service Provider Catalog Singleton and SP resources
 *     					   - Use of Adapator Interface Generator
 *						   - Add Empty templates that can be overriden to add method's codes
 *     Anass Radouani      - Add Service Provider title to getServiceProviderInfos method
 *						   - Add Specific methods for each managed Resource that has its service namespace relative to Service Provider
 *						   - Import the Service Provider Catalog Singleton and SP resources
 *     					   - Use of Adapator Interface Generator
 *						   - Add Empty templates that can be overriden to add method's codes
 *******************************************************************************/
/]

[module generateAdaptorManager('http://org.eclipse.lyo/oslc4j/adaptorInterface', 'http://org.eclipse.lyo/oslc4j/adaptorInterfaceGenerator')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderCatalogServices/]

[template public generateAdaptorManager(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator)]
[file (javaClassFullFileNameForAdaptorManager(anAdaptorInterfaceGenerator), false, 'UTF-8')]
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury       - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid  - Add Service Provider title to getServiceProviderInfos method
 *						   - Add Specific methods for each managed Resource that has its service namespace relative to Service Provider
 *						   - Import the Service Provider Catalog Singleton and SP resources
 *     Anass Radouani      - Add Service Provider title to getServiceProviderInfos method
 *						   - Add Specific methods for each managed Resource that has its service namespace relative to Service Provider
 *						   - Import the Service Provider Catalog Singleton and SP resources
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package [javaClassPackageNameForAdaptorManager(anAdaptorInterfaceGenerator) /];

import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import [javaClassFullNameForSingleton(anAdaptorInterfaceGenerator.adaptorInterface.serviceProviderCatalog, anAdaptorInterfaceGenerator) /];

[for (aServiceProvider: ServiceProvider | anAdaptorInterfaceGenerator.adaptorInterface.serviceProviderCatalog.serviceProviders)]
import [javaClassFullNameForServiceProviderInfo(aServiceProvider, anAdaptorInterfaceGenerator) /];
[for (aResource : Resource | aServiceProvider.services.managedResources()->select(r | r.serviceNamespaceRelativeToServiceProvider(aServiceProvider)))]
import [javaClassFullName(aResource, aServiceProvider, anAdaptorInterfaceGenerator) /];
[/for]
[/for]
[for (aResource: Resource | relevantResources(anAdaptorInterfaceGenerator.adaptorInterface)->sortedBy(name))]
import [javaClassFullName(aResource, anAdaptorInterfaceGenerator) /];
[/for]

[comment Override this template to add Imports /]
[anAdaptorInterfaceGenerator.getExtraImports() /]

// [protected ('imports')]
// [/protected]


// [protected ('pre_class_code')]
// [/protected]

public class [javaClassNameForAdaptorManager(anAdaptorInterfaceGenerator.adaptorInterface) /] {

	// [protected ('class_attributes')]
	// [/protected]
	
	// [protected ('class_methods')]
	// [/protected]


    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
		[comment TODO: {PATTERNS} there could be a pattern we can further develop on for file-based vs. database/web base tools.
		A pattern on how to esablish the connection between the adaptor and the tool.		
		For file-based tools, you would want to establish a single connection between the adaptor and the tool, 
		with which you can handle all calls from all users/sessions. Otherwise, it is a challenge if 2 sessions/connections
		want to access the same file. Such tools are not made for multiple users at the same time.
		Such single connection can be created here in contextInitialized.
		For web/database-based tools, you would want to establish a connection from adaptor to tool for each session/tool.
		Such tools are used to handle multiple connections from different users at the same time.
		The model for how to establish such session-based connections can be borrowed from the Lyo CM Workshop.
		/]
		// TODO Implement code to establish connection to data backbone etc ...
		// [protected ('contextInitializeServletListener')]
		// [/protected]
    }

	public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
	{
		// TODO Implement code to shutdown connections to data backbone etc...
		// [protected ('contextDestroyed')]
		// [/protected]
	}

	[comment TODO: {PATTERNS} generate Genric code that allows developer to create/store identifiers persistently in a database.
	This would allow for the persistent mapping from URIs to specifiic internal data elements.
	This is for identifiers of the serviceProviders, as well as for individual resources.
	/]

	[comment TODO: {PATTERNS} generate Genric code that allows developer to cache resources.
	/]

    [for (aServiceProvider: ServiceProvider | anAdaptorInterfaceGenerator.adaptorInterface.serviceProviderCatalog.serviceProviders)]
    public static [javaClassNameForServiceProviderInfo(aServiceProvider) /] [ '[' ']' /] getServiceProviderInfos['For'.concat(aServiceProvider.title.substituteAll(' ','').toUpperFirst())/](HttpServletRequest httpServletRequest)
    {
		[javaClassNameForServiceProviderInfo(aServiceProvider) /] [ '[' ']' /] serviceProviderInfos = {};
		// TODO Implement code to return the set of ServiceProviders
		// [protected ('getServiceProviderInfos userCode')]
		// [/protected]
		[anAdaptorInterfaceGenerator.getServiceProviderInfos(aServiceProvider) /]
		return serviceProviderInfos;
    }

	[for (aResource : Resource | aServiceProvider.services.managedResources()->select(r | r.serviceNamespaceRelativeToServiceProvider(aServiceProvider)))]
	   public static [javaClassName(aResource, aServiceProvider) /] create[resourceName(aResource, aServiceProvider) /](HttpServletRequest httpServletRequest, final [javaClassName(aResource) /] a[aResource.name.toUpperFirst()/][commaSeparate(collectionMethodSignature(aResource, aServiceProvider), true, false)/])
    {
		[javaClassName(aResource, aServiceProvider) /] new[aResource.name.toUpperFirst() /] = null;
		// TODO Implement code to create a resource
		// [protected ('create'.concat(resourceName(aResource, aServiceProvider)).concat(' userCode'))]
		// [/protected]
		[anAdaptorInterfaceGenerator.createResource(aResource, aServiceProvider) /]
		return new[aResource.name.toUpperFirst() /];
    }

	public static [javaClassName(aResource) /] get[resourceName(aResource, aServiceProvider)/](HttpServletRequest httpServletRequest[commaSeparate(instanceMethodSignature(aResource, aServiceProvider), true, false)/])
    {
		[javaClassName(aResource) /] a[aResource.name.toUpperFirst() /] = null;
		// TODO Implement code to return a resource
		// [protected ('get'.concat(resourceName(aResource, aServiceProvider)).concat(' userCode'))]
		// [/protected]
		[anAdaptorInterfaceGenerator.getResource(aResource, aServiceProvider) /]
		return a[aResource.name.toUpperFirst() /];
    }

    public static List<[javaClassName(aResource) /]> get[resourceName(aResource, aServiceProvider)/]s(HttpServletRequest httpServletRequest[commaSeparate(collectionMethodSignature(aResource, aServiceProvider), true, false)/], int page, int limit)
    {
		List<[javaClassName(aResource) /]> [aResource.name.toLowerFirst() /]s = null;
		// TODO Implement code to return a set of resources
		// [protected ('get'.concat(resourceName(aResource, aServiceProvider)).concat('s userCode'))]
		// [/protected]
		[anAdaptorInterfaceGenerator.getResources(aResource, aServiceProvider) /]
		return [aResource.name.toLowerFirst() /]s;
    }

    public static List<[javaClassName(aResource) /]> search[resourceName(aResource, aServiceProvider)/]s(HttpServletRequest httpServletRequest[commaSeparate(collectionMethodSignature(aResource, aServiceProvider), true, false)/], String terms)
    {
		List<[javaClassName(aResource) /]> [aResource.name.toLowerFirst() /]s = null;
		// TODO Implement code to return a set of resources, based on search criteria 
		// [protected ('search'.concat(resourceName(aResource, aServiceProvider)).concat('s userCode'))]
		// [/protected]
		[anAdaptorInterfaceGenerator.searchResources(aResource, aServiceProvider) /]
		return [aResource.name.toLowerFirst() /]s;
    }

	public static ServiceProvider get[resourceName(aResource, aServiceProvider) /]sManagingServiceProvider(HttpServletRequest httpServletRequest, final [javaClassName(aResource) /] a[aResource.name.toUpperFirst()/][commaSeparate(instanceMethodSignature(aResource, aServiceProvider), true, false)/])
    {
        ServiceProvider aServiceProvider = null;
        //aServiceProvider can be deduced automatically, since the resource's id is relative to that of its serviceProvider.
        aServiceProvider = [javaClassNameForSingleton(anAdaptorInterfaceGenerator.adaptorInterface.serviceProviderCatalog) /].getServiceProvider(httpServletRequest[commaSeparate(aServiceProvider.instanceMethodParameterList(), true, false)/]);
		// TODO Implement code to return a resource's serviceProvider
        // [protected ('get'.concat(resourceName(aResource, aServiceProvider)).concat('sManagingServiceProvider userCode'))]
        // [/protected]
		[anAdaptorInterfaceGenerator.getResourcesManagingServiceProvider(aResource, aServiceProvider) /]
        return aServiceProvider;
    }
    [/for]
    [/for]

	[for (aResource: Resource | servicedResources(anAdaptorInterfaceGenerator.adaptorInterface)->sortedBy(name))]
    public static [javaClassName(aResource) /] get[aResource.name.toUpperFirst() /](HttpServletRequest httpServletRequest[commaSeparate(instanceMethodSignature(aResource, anAdaptorInterfaceGenerator.adaptorInterface), true, false)/])
    {
		[javaClassName(aResource) /] a[aResource.name.toUpperFirst() /] = null;
		// TODO Implement code to return a resource
		// [protected ('get'.concat(aResource.name.toUpperFirst()).concat(' userCode'))]
		// [/protected]
		[anAdaptorInterfaceGenerator.getResource(aResource) /]
		return a[aResource.name.toUpperFirst() /];
    }

    public static List<[javaClassName(aResource) /]> get[aResource.name.toUpperFirst() /]s(HttpServletRequest httpServletRequest[commaSeparate(collectionMethodSignature(aResource, anAdaptorInterfaceGenerator.adaptorInterface), true, false)/], int page, int limit)
    {
		List<[javaClassName(aResource) /]> [aResource.name.toLowerFirst() /]s = null;
		// TODO Implement code to return a set of resources
		// [protected ('get'.concat(aResource.name.toUpperFirst()).concat('s userCode'))]
		// [/protected]
		[anAdaptorInterfaceGenerator.getResources(aResource)/]
		return [aResource.name.toLowerFirst() /]s;
    }

    public static List<[javaClassName(aResource) /]> search[aResource.name.toUpperFirst() /]s(HttpServletRequest httpServletRequest[commaSeparate(collectionMethodSignature(aResource, anAdaptorInterfaceGenerator.adaptorInterface), true, false)/], String terms)
    {
		List<[javaClassName(aResource) /]> [aResource.name.toLowerFirst() /]s = null;
		// TODO Implement code to return a set of resources, based on search criteria 
		// [protected ('search'.concat(aResource.name.toUpperFirst()).concat('s userCode'))]
		// [/protected]
		[anAdaptorInterfaceGenerator.searchResource(aResource)/]
		return [aResource.name.toLowerFirst() /]s;
    }

    public static [javaClassName(aResource) /] create[aResource.name.toUpperFirst() /](HttpServletRequest httpServletRequest, final [javaClassName(aResource) /] a[aResource.name.toUpperFirst()/][commaSeparate(collectionMethodSignature(aResource, anAdaptorInterfaceGenerator.adaptorInterface), true, false)/])
    {
		[javaClassName(aResource) /] new[aResource.name.toUpperFirst() /] = null;
		// TODO Implement code to create a resource
		// [protected ('create'.concat(aResource.name.toUpperFirst()).concat(' userCode'))]
		// [/protected]
		[anAdaptorInterfaceGenerator.createResource(aResource)/]
		return new[aResource.name.toUpperFirst() /];
    }

    public static String getETagFrom[aResource.name.toUpperFirst() /](final [javaClassName(aResource) /] a[aResource.name.toUpperFirst() /])
    {
		String eTag = null;
		// TODO Implement code to return an ETag for a particular resource
		// [protected ('getETagFrom'.concat(aResource.name.toUpperFirst()).concat(' userCode'))]
		// [/protected]
		[anAdaptorInterfaceGenerator.getETagFromResource(aResource) /]
		return eTag;
    }

    public static ServiceProvider get[aResource.name.toUpperFirst() /]sManagingServiceProvider(HttpServletRequest httpServletRequest, final [javaClassName(aResource) /] a[aResource.name.toUpperFirst()/][commaSeparate(instanceMethodSignature(aResource, anAdaptorInterfaceGenerator.adaptorInterface), true, false)/])
    {
        ServiceProvider aServiceProvider = null;
		// TODO Implement code to return a resource's serviceProvider
        // [protected ('get'.concat(aResource.name.toUpperFirst()).concat('sManagingServiceProvider userCode'))]
        // [/protected]
		[anAdaptorInterfaceGenerator.getResourceManagingServiceProvider(aResource)/]
        return aServiceProvider;
    }

	[/for]

}

[/file]
[/template]

[comment Override this template to add Imports /]
[template public getExtraImports(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator)]
[/template]

[comment Override this template to get ServiceProviderInfos /]
[template public getServiceProviderInfos(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aServiceProvider : ServiceProvider)]
[/template]

[comment Override this template to create Resource /]
[template public createResource(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aResource : Resource, aServiceProvider : ServiceProvider)]
[/template]

[comment Override this template to get Resource /]
[template public getResource(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aResource : Resource, aServiceProvider : ServiceProvider)]
[/template]

[comment Override this template to get Resources /]
[template public getResources(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aResource : Resource, aServiceProvider : ServiceProvider)]
[/template]

[comment Override this template to search Resources /]
[template public searchResources(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aResource : Resource, aServiceProvider : ServiceProvider)]
[/template]

[comment Override this template to get Resources Managing Service Provider /]
[template public getResourcesManagingServiceProvider(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aResource : Resource, aServiceProvider : ServiceProvider)]
[/template]

[comment Override this template to get Resource /]
[template public getResource(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aResource : Resource)]
[/template]

[comment Override this template to get Resources /]
[template public getResources(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aResource : Resource)]
[/template]

[comment Override this template to search Resource /]
[template public searchResource(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aResource : Resource)]
[/template]

[comment Override this template to create Resource /]
[template public createResource(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aResource : Resource)]
[/template]

[comment Override this template to get ETag From Resource /]
[template public getETagFromResource(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aResource : Resource)]
[/template]

[comment Override this template to get Resource Managing Service Provider /]
[template public getResourceManagingServiceProvider(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, aResource : Resource)]
[/template]
