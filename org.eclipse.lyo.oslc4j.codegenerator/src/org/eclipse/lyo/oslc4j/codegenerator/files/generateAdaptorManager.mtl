[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *******************************************************************************/
/]

[module generateAdaptorManager('org.eclipse.lyo.oslc4j.adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]

[template public generateAdaptorManager(anAdaptorInterface : AdaptorInterface)]
[file (javaClassFullFileNameForAdaptorManager(anAdaptorInterface), false, 'UTF-8')]
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/


package [javaClassPackageNameForAdaptorManager(anAdaptorInterface) /];

import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;

import [javaClassFullNameForServiceProviderInfo(anAdaptorInterface) /];
[for (aResource: Resource | relevantResources(anAdaptorInterface)->sortedBy(name))]
		import [javaClassFullName(aResource) /];
[/for]

// [protected ('imports')]
// [/protected]


// [protected ('pre_class_code')]
// [/protected]

public class [javaClassNameForAdaptorManager(anAdaptorInterface) /] {

	// [protected ('class_attributes')]
	// [/protected]
	
	// [protected ('class_methods')]
	// [/protected]


    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
		[comment TODO: {PATTERNS} there could be a pattern we can further develop on for file-based vs. database/web base tools.
		A pattern on how to esablish the connection between the adaptor and the tool.		
		For file-based tools, you would want to establish a single connection between the adaptor and the tool, 
		with which you can handle all calls from all users/sessions. Otherwise, it is a challenge if 2 sessions/connections
		want to access the same file. Such tools are not made for multiple users at the same time.
		Such single connection can be created here in contextInitialized.
		For web/database-based tools, you would want to establish a connection from adaptor to tool for each session/tool.
		Such tools are used to handle multiple connections from different users at the same time.
		The model for how to establish such session-based connections can be borrowed from the Lyo CM Workshop.
		/]
		// Establish connection to data backbone etc ...
		// [protected ('contextInitializeServletListener')]
		// [/protected]
    }

	public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
	{
		// Shutdown connections to data backbone etc...
		// [protected ('contextDestroyed')]
		// [/protected]
	}

	[comment TODO: {PATTERNS} generate Genric code that allows developer to create/store identifiers persistently in a database.
	This would allow for the persistent mapping from URIs to specifiic internal data elements.
	This is for identifiers of the serviceProviders, as well as for individual resources.
	/]

	[comment TODO: {PATTERNS} generate Genric code that allows developer to cache resources.
	/]

    public static [javaClassNameForServiceProviderInfo(anAdaptorInterface) /] [ '[' ']' /] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
		[javaClassNameForServiceProviderInfo(anAdaptorInterface) /] [ '[' ']' /] serviceProviderInfos = {};
		// [protected ('(MUST_FILL_IN) getServiceProviderInfos userCode')]
		// [/protected]
		return serviceProviderInfos;
    }

	[for (aService: Service | anAdaptorInterface.serviceProviderCatalog.serviceProviders.services)]
	[comment TODO: I am looping through services. This code will cause problems if 2 services have the same coveredResource
	since I will be producing the same functions twice.
	Fix, so that I first work out the set of coveredResources of all services, and then
	produce the functions for them.
	The reason I don't loop through all resources, is that I only want to produce functions for the resources
	that are needed in the services. Resources with no rol in a service should not be produced. /]
    public static [javaClassName(coveredResource(aService)) /] get[coveredResource(aService).name.toUpperFirst() /](HttpServletRequest httpServletRequest, String [coveredResource(aService).name.toLowerFirst() /]Id, String serviceProviderId)
    {
		[javaClassName(coveredResource(aService)) /] a[coveredResource(aService).name.toUpperFirst() /] = null;
		// [protected ('(MUST_FILL_IN) getResource userCode')]
		// [/protected]
		return a[coveredResource(aService).name.toUpperFirst() /];
    }

    public static List<[javaClassName(coveredResource(aService)) /]> get[coveredResource(aService).name.toUpperFirst() /]s(HttpServletRequest httpServletRequest, String serviceProviderId, int page, int limit)
    {
		List<[javaClassName(coveredResource(aService)) /]> [coveredResource(aService).name.toLowerFirst() /]s = null;
		// [protected ('(MUST_FILL_IN) getResources userCode')]
		// [/protected]
		return [coveredResource(aService).name.toLowerFirst() /]s;
    }

    public static List<[javaClassName(coveredResource(aService)) /]> search[coveredResource(aService).name.toUpperFirst() /]s(HttpServletRequest httpServletRequest, String serviceProviderId, String terms)
    {
		List<[javaClassName(coveredResource(aService)) /]> [coveredResource(aService).name.toLowerFirst() /]s = null;
		// [protected ('(MUST_FILL_IN) searchResources userCode')]
		// [/protected]
		return [coveredResource(aService).name.toLowerFirst() /]s;
    }

    public static [javaClassName(coveredResource(aService)) /] create[coveredResource(aService).name.toUpperFirst() /](HttpServletRequest httpServletRequest, final [javaClassName(coveredResource(aService)) /] a[coveredResource(aService).name.toUpperFirst() /], final String serviceProviderId)
    {
		[javaClassName(coveredResource(aService)) /] new[coveredResource(aService).name.toUpperFirst() /] = null;
		// [protected ('(MUST_FILL_IN) createResource userCode')]
		// [/protected]
		return new[coveredResource(aService).name.toUpperFirst() /];
    }
	[/for]

}

[/file]
[/template]
