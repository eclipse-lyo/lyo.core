[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *******************************************************************************/
/]

[module generate('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourcePropertyServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]

[import org::eclipse::lyo::oslc4j::codegenerator::files::generateServiceProviderCatalogService/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateServiceProviderCatalogSingleton/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateAdaptorServiceProviderFactory/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateAdaptorManager/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateAdaptorServletListener/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateDelegatedUIJavaScripts/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateAdaptorApplication/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateAdaptorPackageInfo/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateAdaptorConstants/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateServiceProviderCatalogHTML/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateServiceProviderHTML/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateServiceProviderService/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateServiceProviderInfo/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResource/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceInterface/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceService/]
[import org::eclipse::lyo::oslc4j::codegenerator::staticFiles::generateLicenseFiles/]

[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceCollectionJsp/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateFilteredResourceCollectionJsp/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateGetResourceJsp/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceCreatorJsp/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceSelectorJsp/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceSelectorClientJsp/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceCreatorClientJsp/]


[import org::eclipse::lyo::oslc4j::codegenerator::files::generateAdaptorClient/]

[template public generate(anAdaptorInterface : AdaptorInterface)]
[comment @main/]

[anAdaptorInterface.generateLicenseFiles() /]
[anAdaptorInterface.generateAdaptorApplication() /]
[anAdaptorInterface.generateAdaptorConstants() /]
[anAdaptorInterface.generateAdaptorPackageInfo() /]
[anAdaptorInterface.generateAdaptorServletListener() /]
[anAdaptorInterface.generateAdaptorManager() /]
[anAdaptorInterface.generateDelegatedUIJavaScripts() /]
[anAdaptorInterface.generateResourceSelectorClientJsp() /]
[anAdaptorInterface.generateResourceCreatorClientJsp() /]

[if (not anAdaptorInterface.serviceProviderCatalog.oclIsUndefined())]
[anAdaptorInterface.serviceProviderCatalog.generateServiceProviderCatalogService() /]
[anAdaptorInterface.serviceProviderCatalog.generateServiceProviderCatalogSingleton() /]
[anAdaptorInterface.serviceProviderCatalog.generateServiceProviderCatalogHTML() /]
[/if]

[for (aResource: Resource | relevantResources(anAdaptorInterface))]
	[aResource.generateResource(anAdaptorInterface) /]
	[aResource.generateResourceInterface(anAdaptorInterface, anAdaptorInterface) /]
	[if (not basicCapabilities(anAdaptorInterface, aResource)->isEmpty())]
		[aResource.generateGetResourceJsp(anAdaptorInterface, anAdaptorInterface) /]
	[/if]
[/for]

[for (aServiceProvider: ServiceProvider | anAdaptorInterface.serviceProviders())]
    [aServiceProvider.generateServiceProviderInfo() /]
	[aServiceProvider.generateServiceProviderService()/]
	[aServiceProvider.generateAdaptorServiceProviderFactory() /]
	[aServiceProvider.generateServiceProviderHTML() /]

	[for (aService: Service | aServiceProvider.services)]
		[aService.generateResourceService()/]

		[for (aQueryCapability: QueryCapability | aService.queryCapabilities)]
		[comment Produce one only jsp-file for each set of QueryCapabilities that have the same Sequence (not Set) of ResourceTypes. /]
		[let allQueryCapabilities: Sequence(QueryCapability) = anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.queryCapabilities]
			[if not (allQueryCapabilities->excluding(aQueryCapability)->exists(anotherQueryCapability: QueryCapability | 
					(anotherQueryCapability.resourceTypes = aQueryCapability.resourceTypes).
					_and(allQueryCapabilities->indexOf(anotherQueryCapability) > allQueryCapabilities->indexOf(aQueryCapability))))]
				[aQueryCapability.generateResourceCollectionJsp() /]
			[/if]
		[/let]
		[/for]
	
		[for (aSelectionDialog: Dialog | aService.selectionDialogs)]
		[comment Produce one only set of jsp-files for each set of selectionDialogs that have the same Sequence (not Set) of ResourceTypes. /]
		[let allSelectionDialogs: Sequence(Dialog) = anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.selectionDialogs]
			[if not (allSelectionDialogs->excluding(aSelectionDialog)->exists(anotherSelectionDialog: Dialog | 
					(anotherSelectionDialog.resourceTypes = aSelectionDialog.resourceTypes).
					_and(allSelectionDialogs->indexOf(anotherSelectionDialog) > allSelectionDialogs->indexOf(aSelectionDialog))))]
				[aSelectionDialog.generateFilteredResourceCollectionJsp() /]
				[aSelectionDialog.generateResourceSelectorJsp() /]
			[/if]
		[/let]
		[/for]
	
		[for (aCreationDialog: Dialog | aService.creationDialogs)]
		[comment Produce one only jsp-file for each set of creationDialogs that have the same Sequence (not Set) of ResourceTypes. /]
		[let allCreationDialogs: Sequence(Dialog) = anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.creationDialogs]
			[if not (allCreationDialogs->excluding(aCreationDialog)->exists(anotherCreationDialog: Dialog | 
					(anotherCreationDialog.resourceTypes = aCreationDialog.resourceTypes).
					_and(allCreationDialogs->indexOf(anotherCreationDialog) > allCreationDialogs->indexOf(aCreationDialog))))]
				[aCreationDialog.generateResourceCreatorJsp() /]
			[/if]
		[/let]
		[/for]
	[/for]
[/for]

[for (aRequiredAdaptor: RequiredAdaptor | anAdaptorInterface.requiredAdaptors)]
	[aRequiredAdaptor.generateAdaptorClient(anAdaptorInterface) /]
[/for]
[/template]
