[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     
 *******************************************************************************/
/]

[module resourcePropertyServices('org.eclipse.lyo.oslc4j.adaptorInterface')/]

[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]

[query public definingDomainSpecification(aProperty: ResourceProperty) : DomainSpecification =
aProperty.eContainer(DomainSpecification)
/]

[comment TODO: "URI" should actually not be a valueType since it is not OSLC-standard. However, this is one way to allow user to specify a URI as a type.
Another approach would be to have a valueType as String, and the Range being set to "URI", hence creating a URI (local) resource? 
But I really want the user to be able to map to java.net.URI, just like they can map to String or Boolean - without having to create a resource for that. /]
[query public hasOSLCSupportedValueType(aProperty: ResourceProperty) : Boolean = 
not (Sequence{'URI'}->includes(aProperty.valueType.toString()))
/]

[query public nameAnnotation(aProperty: ResourceProperty) : String = 
'@OslcName("'.concat(aProperty.name). concat('")')
/]

[query public propertyDefinitionAnnotation(aProperty: ResourceProperty, aResource: Resource) : String = 
'@OslcPropertyDefinition('.concat(javaInterfaceNameForAdaptorConstants(aResource.eContainer(AdaptorInterface))).concat('.').concat(domainSpecificationNamespaceConstantName(aProperty.definingDomainSpecification())) . concat(' + "').concat(aProperty.name).concat('")')
/]

[query public descriptionAnnotation(aProperty: ResourceProperty) : String = 
(if (not aProperty.description.oclIsUndefined()) then
	'@OslcDescription("'.concat(aProperty.description).concat('")')
else
	''
endif)
/]

[query public occursAnnotation(aProperty: ResourceProperty) : String = 
(if (not aProperty.occurs.oclIsUndefined()) then
	if (aProperty.occurs = ResourcePropertyOccurs::exactlyOne) then
		'@OslcOccurs(Occurs.ExactlyOne)'
	else
		if (aProperty.occurs = ResourcePropertyOccurs::zeroOrOne) then
			'@OslcOccurs(Occurs.ZeroOrOne)'
		else
			if (aProperty.occurs = ResourcePropertyOccurs::zeroOrMany) then
				'@OslcOccurs(Occurs.ZeroOrMany)'
			else
				if (aProperty.occurs = ResourcePropertyOccurs::oneOrMany) then
					'@OslcOccurs(Occurs.OneOrMany)'
				else
					''
				endif
			endif
		endif
	endif
else
	''
endif)
/]

[query public valueTypeAnnotation(aProperty: ResourceProperty) : String = 
(if (not aProperty.valueType.oclIsUndefined()) then
	if (hasOSLCSupportedValueType(aProperty)) then
		'@OslcValueType(ValueType.'.concat(aProperty.valueType.toString()).concat(')')
	else
		''
	endif
else
	''
endif)
/]

[query public representationAnnotation(aProperty: ResourceProperty) : String = 
(if (not aProperty.representation.oclIsUndefined()) then
	if (aProperty.representation.toString().equalsIgnoreCase('representation.n/a')) then
		'@OslcRepresentation(Representation.'.concat(aProperty.representation.toString().toUpperFirst()).concat(')')
	else
		''
	endif
else
	''
endif)
/]

[query public rangeAnnotation(aProperty: ResourceProperty, aResource: Resource) : String = 
(if (not aProperty.range.oclIsUndefined()) then
	'@OslcRange('.concat(javaInterfaceNameForAdaptorConstants(aResource.eContainer(AdaptorInterface))).concat('.').concat(resourceTypeConstantName(aProperty.range)).concat(')')
else
	''
endif)
/]

[query public readOnlyAnnotation(aProperty: ResourceProperty) : String = 
(if (not aProperty.readOnly.oclIsUndefined()) then
	'@OslcReadOnly('.concat(aProperty.readOnly.toString()).concat(')')
else
	''
endif)
/]

[query public titleAnnotation(aProperty: ResourceProperty) : String = 
(if (not aProperty.title.oclIsUndefined()) then
	'@OslcTitle("'.concat(aProperty.title).concat('")')
else
	''
endif)
/]

[query public prefixedName(aProperty: ResourceProperty) : String = 
aProperty.definingDomainSpecification().namespacePrefix.name.concat(':').concat(aProperty.name)
/]

[query public typeURI(aProperty: ResourceProperty) : String = 
aProperty.definingDomainSpecification().namespaceURI.concat('#').concat(aProperty.name)
/]

[query public javaAttributeTypeNeedsConstruction(aProperty: ResourceProperty) : Boolean = 
Sequence{'Resource', 'LocalResource'}->includes(aProperty.valueType.toString())._or(Sequence{'zeroOrMany', 'oneOrMany'}->includes(aProperty.occurs.toString()))
/]

[query public javaAttributeBaseTypeCastFromString(aProperty: ResourceProperty, variable: String) : String = 
	(if (aProperty.valueType.toString() = 'String') then
		variable
	else
		if (aProperty.valueType.toString() = 'XMLLiteral') then
			variable
		else
			if(aProperty.valueType.toString() = 'DateTime') then
				'new SimpleDateFormat().parse(' + variable + ')'
			else
				if(aProperty.valueType.toString() = 'URI') then
					'new URI(' + variable + ')'
				else
					if(aProperty.valueType.toString() = 'Boolean') then
						'new Boolean(' + variable + ')'
					else
						if(aProperty.valueType.toString() = 'Resource') then
							'new Link(new URI(' + variable + '))'
						else
							if(aProperty.valueType.toString() = 'LocalResource') then
								if (not aProperty.range.oclIsUndefined()) then
									'new ' + javaClassName(aProperty.range) + '(new URI(' + variable + '))'
								else
									'new Link(new URI(' + variable + '))'
								endif
							else
								''
							endif
						endif
					endif
				endif
			endif
		endif
	endif)
/]


[comment TODO: If occurs = 'zeroOrMany', it is not 100% clear when to use Set and when to use ArrayList, or TreeSet./]
[query public javaAttributeTypeDeclaration(aProperty: ResourceProperty) : String = 
    (if (Sequence{'zeroOrMany', 'oneOrMany'}->includes(aProperty.occurs.toString())) then
        'HashSet<'
    else
        ''
    endif)
	.concat(javaAttributeBaseType(aProperty))
	.concat(
    (if (Sequence{'zeroOrMany', 'oneOrMany'}->includes(aProperty.occurs.toString())) then 
        '>'
    else
        ''
    endif))
/]

[comment For Resource properties, we always have a Link type. That is how OSLC4 wants it. /]
[query public javaAttributeBaseType(aProperty: ResourceProperty) : String =
	(if (aProperty.valueType.toString() = 'String') then
		'String'
	else
		if (aProperty.valueType.toString() = 'XMLLiteral') then
			'String'
		else
			if(aProperty.valueType.toString() = 'DateTime') then
				'Date'
			else
				if(aProperty.valueType.toString() = 'URI') then
					'URI'
				else
					if(aProperty.valueType.toString() = 'Boolean') then
						'Boolean'
					else
						if(aProperty.valueType.toString() = 'Resource') then
								'Link'
						else
							if(aProperty.valueType.toString() = 'LocalResource') then
								if (not aProperty.range.oclIsUndefined()) then
									javaClassName(aProperty.range)
								else
									'Link'
								endif
							else
								''
							endif
						endif
					endif
				endif
			endif
		endif
	endif)
/]

[template public javaAttributeName(aProperty: ResourceProperty, aResource: Resource)] 
[if (allProperties(aResource).name->count(aProperty.name) = 1)][aProperty.name /][else][aProperty.definingDomainSpecification().namespacePrefix.name.concat(aProperty.name.toUpperFirst()) /][/if][if (aProperty.occurs.toString() = 'zeroOrMany')]s[/if]
[/template]


