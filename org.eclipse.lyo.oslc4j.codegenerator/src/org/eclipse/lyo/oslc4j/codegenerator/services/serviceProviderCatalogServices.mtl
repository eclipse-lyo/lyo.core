[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *	   Matthieu Helleboid	- Use of Adapator Interface Generator
 *							- Add prefix meta value to get package queries
 *								with prefix, the generator object can change files location (to generate them in different plugins for example)
 *	   Anass Radouani		- Use of Adapator Interface Generator
 *							- Add prefix meta value to get package queries
 *								with prefix, the generator object can change files location (to generate them in different plugins for example)
 *     
 *******************************************************************************/
/]

[module serviceProviderCatalogServices('http://org.eclipse.lyo/oslc4j/adaptorInterface', 'http://org.eclipse.lyo/oslc4j/adaptorInterfaceGenerator')/]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]

[query public containingServiceProviderCatalog(obj : OclAny) : ServiceProviderCatalog =
obj.eContainer(ServiceProviderCatalog)
/]

[comment Services for serviceProviderCatalogSingleton /]
[query public javaClassPackageNameForSingleton(aServiceProviderCatalog : ServiceProviderCatalog, anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String = 
anAdaptorInterfaceGenerator.metaValue('prefix', Sequence{'SPCatalogSingleton'}).concat(javaClassBaseNamespace(anAdaptorInterfaceGenerator)).concat('.servlet')
/]

[query public javaClassNameForSingleton(aServiceProviderCatalog : ServiceProviderCatalog) : String = 
'ServiceProviderCatalogSingleton'
/]

[query public javaClassFullNameForSingleton(aServiceProviderCatalog : ServiceProviderCatalog, anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String = 
javaClassPackageNameForSingleton(aServiceProviderCatalog, anAdaptorInterfaceGenerator).concat('.').concat(javaClassNameForSingleton(aServiceProviderCatalog))
/]

[query public javaClassFullFileNameForSingleton(aServiceProviderCatalog : ServiceProviderCatalog, anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String = 
javaFilesBasePath(anAdaptorInterfaceGenerator).concat(javaClassPackageNameForSingleton(aServiceProviderCatalog, anAdaptorInterfaceGenerator).substituteAll('.', '/')).concat('/').concat(javaClassNameForSingleton(aServiceProviderCatalog)).concat('.java')
/]

[comment Services for serviceProviderCatalogService /]
[query public javaClassPackageNameForService(aServiceProviderCatalog : ServiceProviderCatalog, anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String = 
anAdaptorInterfaceGenerator.metaValue('prefix', Sequence{'SPCatalogService'}).concat(javaClassBaseNamespace(anAdaptorInterfaceGenerator)).concat('.services')
/]

[query public javaClassNameForService(aServiceProviderCatalog : ServiceProviderCatalog) : String = 
'ServiceProviderCatalogService'
/]

[query public javaClassFullNameForService(aServiceProviderCatalog : ServiceProviderCatalog, anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String = 
javaClassPackageNameForService(aServiceProviderCatalog, anAdaptorInterfaceGenerator).concat('.').concat(javaClassNameForService(aServiceProviderCatalog))
/]

[query public javaClassFullFileNameForService(aServiceProviderCatalog : ServiceProviderCatalog, anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String = 
javaFilesBasePath(anAdaptorInterfaceGenerator).concat(javaClassPackageNameForService(aServiceProviderCatalog, anAdaptorInterfaceGenerator).substituteAll('.', '/')).concat('/').concat(javaClassNameForService(aServiceProviderCatalog)).concat('.java')
/]
