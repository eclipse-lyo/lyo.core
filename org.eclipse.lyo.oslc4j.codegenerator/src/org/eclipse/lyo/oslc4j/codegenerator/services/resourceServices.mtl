[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     
 *******************************************************************************/
/]

[module resourceServices('http://org.eclipse.lyo/oslc4j/adaptorInterface')/]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::domainSpecificationServices/]

[query public directParentResource(aResource: Resource) : Resource =
    (if (aResource.extends->notEmpty()) then 
        aResource.extends->first()
    else
        null
    endif)
/]

[query public parentResources(aResource: Resource) : Set(Resource) =
    (if (directParentResource(aResource)->notEmpty()) then 
        directParentResource(aResource)->union(parentResources(directParentResource(aResource)))
    else
        Set{}
    endif)
/]

[query public allExtendingResources(aResource: Resource) : OrderedSet(Resource) =
	aResource.extends
	->union(
			aResource.extends->collectNested(r:Resource | allExtendingResources(r))->flatten()->asOrderedSet()
			)
	->asOrderedSet()
/]

[query public interfaceResources(aResource: Resource) : OrderedSet(Resource) =
	directInterfaceResources(aResource)
	->union(
			directInterfaceResources(aResource)->collectNested(r:Resource | allExtendingResources(r))->flatten()->asOrderedSet()
			)
	->asOrderedSet()
/]

[query private directInterfaceResources(aResource: Resource) : OrderedSet(Resource) =
	(if (aResource.extends->size() > 1) then 
        aResource.extends->subOrderedSet(2, aResource.extends->size())
    else
        OrderedSet{}
    endif)

/]

[query public directlyRelatedResources(aResource: Resource) : Set(Resource) =
	(aResource.resourceProperties->select(aProperty : ResourceProperty | not aProperty.range.oclIsUndefined()).range)->asSet()
	->union(
		aResource.extends
	)->flatten()->asSet()
/]

[query private allRelatedResources(aResource: Resource, alreadyAnalysed : Set(Resource)) : Set(Resource) =
let drr : Set(Resource) = directlyRelatedResources(aResource) in 
	drr->collectNested(r : Resource | 
		Set{r}
		->union(directlyRelatedResources(r))
		->union(
			(if (alreadyAnalysed->includes(r)) then 
		        Set{}
		    else
				allRelatedResources(r, (Set{aResource}->union(drr))->union(alreadyAnalysed))
		    endif)
		)
	)->flatten()->asSet()
/]

[query public allRelatedResources(aResource: Resource) : Set(Resource) =
	allRelatedResources(aResource, Set{})
/]

[query public managingServiceProviders(aResource: Resource, anAdaptorInterface : AdaptorInterface) : Set(ServiceProvider) = 
anAdaptorInterface.serviceProviderCatalog.serviceProviders->select(aServiceProvider : ServiceProvider | 
            aServiceProvider.services.queryCapabilities->exists(aQueryCapability : QueryCapability | aQueryCapability.resourceTypes->includes(aResource))
                ._or(aServiceProvider.services.basicCapabilities->exists(aBasicCapability : BasicCapability | aBasicCapability.resourceTypes->includes(aResource)))
                ._or(aServiceProvider.services.creationFactories->exists(aCreationFactory : CreationFactory | aCreationFactory.resourceTypes->includes(aResource)))
                ._or(aServiceProvider.services.selectionDialogs->exists(aDialog : Dialog | aDialog.resourceTypes->includes(aResource)))
                ._or(aServiceProvider.services.creationDialogs->exists(aDialog : Dialog | aDialog.resourceTypes->includes(aResource)))
            )->asSet()
/]

[query public queryCapabilities(aResource: Resource, anAdaptorInterface : AdaptorInterface) : Set(QueryCapability) = 
anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.queryCapabilities->select(aQueryCapability : QueryCapability | aQueryCapability.resourceTypes->includes(aResource))->asSet()
/]

[query public basicCapabilities(aResource: Resource, anAdaptorInterface : AdaptorInterface) : Set(BasicCapability) = 
anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.basicCapabilities->select(aBasicCapability : BasicCapability | aBasicCapability.resourceTypes->includes(aResource))->asSet()
/]

[query public creationFactories(aResource: Resource, anAdaptorInterface : AdaptorInterface) : Set(CreationFactory) = 
anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.creationFactories->select(aCreationFactory : CreationFactory | aCreationFactory.resourceTypes->includes(aResource))->asSet()
/]

[query public selectionDialogs(aResource: Resource, anAdaptorInterface : AdaptorInterface) : Set(Dialog) = 
anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.selectionDialogs->select(aDialog : Dialog | aDialog.resourceTypes->includes(aResource))->asSet()
/]

[query public creationDialogs(aResource: Resource, anAdaptorInterface : AdaptorInterface) : Set(Dialog) = 
anAdaptorInterface.serviceProviderCatalog.serviceProviders.services.creationDialogs->select(aDialog : Dialog | aDialog.resourceTypes->includes(aResource))->asSet()
/]

[query public allProperties(aResource: Resource) : Sequence(ResourceProperty) = 
((aResource.resourceProperties->asSequence())
	->union(inheritedProperties(aResource))
	->union(interfaceProperties(aResource))
)
/]

[query private inheritedProperties(aResource: Resource) : Sequence(ResourceProperty) = 
    (if (not aResource.directParentResource().oclIsUndefined()) then 
        (aResource.directParentResource().resourceProperties->asSequence())->union(inheritedProperties(aResource.directParentResource()))
    else
        Sequence{}
    endif)
/]

[query public interfaceProperties(aResource: Resource) : Sequence(ResourceProperty) =
	aResource.interfaceResources().resourceProperties
/]

[query public prefixedName(aResource: Resource) : String = 
aResource.definingDomainSpecification().namespacePrefix.name.concat(':').concat(aResource.name)
/]

[query public javaName(aResource: Resource, toUpperFirst : Boolean) : String = 
javaString(aResource.name, toUpperFirst)
/]

[comment TODO: in the Constants file, I generate constants that SHOULD match the URI developed here. But this code is not related to the way I generated the constants.
Make sure this query and the Constants generation are based on the same set of base functions. THat is, make sure both functions produce matching URI values in the end. /]
[query public typeURI(aResource: Resource) : String = 
aResource.definingDomainSpecification().namespaceURI.concat('#').concat(aResource.name)
/]

[query public javaInstanceName(aResource: Resource) : String = 
javaName(aResource, false)
/]

[query public javaClassPackageName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassBaseNamespace(anAdaptorInterface).concat('.resources')
/]

[query public javaClassName(aResource: Resource) : String = 
javaName(aResource, true)
/]

[query public javaClassFullName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassPackageName(aResource, anAdaptorInterface).concat('.').concat(javaClassName(aResource))
/]

[query public javaClassFullFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaFilesBasePath(anAdaptorInterface).concat(javaClassPackageName(aResource, anAdaptorInterface).substituteAll('.', '/')).concat('/').concat(javaClassName(aResource)).concat('.java')
/]

[query public javaInterfacePackageName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassBaseNamespace(anAdaptorInterface).concat('.resources')
/]

[query public javaInterfaceName(aResource: Resource) : String = 
'I'.concat(aResource.name.substituteAll(' ', '').toUpperFirst())
/]

[query public javaInterfaceFullName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaInterfacePackageName(aResource, anAdaptorInterface).concat('.').concat(javaInterfaceName(aResource))
/]

[query public javaInterfaceFullFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaFilesBasePath(anAdaptorInterface).concat(javaInterfacePackageName(aResource, anAdaptorInterface).substituteAll('.', '/')).concat('/').concat(javaInterfaceName(aResource)).concat('.java')
/]

[query public javaClassPackageNameForService(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassBaseNamespace(anAdaptorInterface).concat('.services')
/]

[query public javaClassNameForService(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
aResource.name.substituteAll(' ', '').toUpperFirst().concat('Service')
/]

[query public javaClassFullNameForService(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaClassPackageNameForService(aResource, anAdaptorInterface).concat('.').concat(javaClassNameForService(aResource, anAdaptorInterface))
/]

[query public javaClassFullFileNameForService(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
javaFilesBasePath(anAdaptorInterface).concat(javaClassPackageNameForService(aResource, anAdaptorInterface).substituteAll('.', '/')).concat('/').concat(javaClassNameForService(aResource, anAdaptorInterface)).concat('.java')
/]


[comment default to true if the property is not explicitly defined /]
[query public serviceNamespaceRelativeToServiceProvider (aResource: Resource, anAdaptorInterface : AdaptorInterface) : Boolean = 
(if (basicCapabilities(aResource, anAdaptorInterface)->size() > 0) then
    (if (not basicCapabilities(aResource, anAdaptorInterface)->any(true).serviceNamespace.oclIsUndefined()) then
        (if (basicCapabilities(aResource, anAdaptorInterface)->any(true).serviceNamespace = ResourceServiceNamespace::relativeToServiceProvider) then
            true
        else
            false
        endif)
    else
        true
    endif)
else
    true
endif)
/]

[query public serviceBaseURI (aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
(if (serviceNamespaceRelativeToServiceProvider (aResource, anAdaptorInterface)) then
    JAXRSConcatURISegments (
        instanceURI(managingServiceProviders(aResource, anAdaptorInterface)->any(true)),
        aResource.name.toLowerFirst().concat('s')
    )
else
    aResource.name.toLowerFirst().concat('s')
endif)
/]

[query public collectionURISegment (aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
    ''
/]

[query public collectionURI (aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
    JAXRSConcatURISegments(serviceBaseURI (aResource, anAdaptorInterface), collectionURISegment (aResource, anAdaptorInterface))
/]

[query public collectionCompositeID (aResource: Resource, anAdaptorInterface : AdaptorInterface) : Sequence(String) = 
    JAXRSPathParameters(collectionURI (aResource, anAdaptorInterface))
/]

[query public instanceURISegment (aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
(if (basicCapabilities(aResource, anAdaptorInterface)->size() > 0) then
    (if (not basicCapabilities(aResource, anAdaptorInterface)->any(true).instanceID.oclIsUndefined())._and(not basicCapabilities(aResource, anAdaptorInterface)->any(true).instanceID.equalsIgnoreCase('')) then
        basicCapabilities(aResource, anAdaptorInterface)->any(true).instanceID
    else
        '{'.concat(aResource.name.toLowerFirst()).concat('Id}')
    endif)
else
    '{'.concat(aResource.name.toLowerFirst()).concat('Id}')
endif)
/]

[query public instanceURI (aResource: Resource, anAdaptorInterface : AdaptorInterface) : String = 
    JAXRSConcatURISegments(serviceBaseURI (aResource, anAdaptorInterface), instanceURISegment (aResource, anAdaptorInterface))
/]

[query public instanceCompositeID (aResource: Resource, anAdaptorInterface : AdaptorInterface) : Sequence(String) = 
JAXRSPathParameters(aResource.instanceURI(anAdaptorInterface))
/]

[template public collectionJAXRSMethodSignature(aResource: Resource, anAdaptorInterface : AdaptorInterface)] 
[for (aPathParameter: String | JAXRSPathParameters(aResource.collectionURI(anAdaptorInterface))) separator(', ')]@PathParam("[aPathParameter /]") final String [aPathParameter /][/for]
[/template]

[template public collectionMethodSignature(aResource: Resource, anAdaptorInterface : AdaptorInterface)] 
[for (collectionCompositeID: String | collectionCompositeID(aResource, anAdaptorInterface)) separator(', ')]final String [collectionCompositeID /][/for]
[/template]

[template public collectionMethodParameterList(aResource: Resource, anAdaptorInterface : AdaptorInterface)] 
[for (collectionCompositeID: String | collectionCompositeID(aResource, anAdaptorInterface)) separator(', ')][collectionCompositeID /][/for]
[/template]

[template public instanceJAXRSMethodSignature(aResource: Resource, anAdaptorInterface : AdaptorInterface)] 
[for (aPathParameter: String | JAXRSPathParameters(aResource.instanceURI(anAdaptorInterface))) separator(', ')]@PathParam("[aPathParameter /]") final String [aPathParameter /][/for]
[/template]

[template public instanceMethodSignature(aResource: Resource, anAdaptorInterface : AdaptorInterface)] 
[for (instanceCompositeID: String | instanceCompositeID(aResource, anAdaptorInterface)) separator(', ')]final String [instanceCompositeID /][/for]
[/template]

[template public instanceMethodParameterList(aResource: Resource, anAdaptorInterface : AdaptorInterface)] 
[for (instanceCompositeID: String | instanceCompositeID(aResource, anAdaptorInterface)) separator(', ')][instanceCompositeID /][/for]
[/template]
