[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Use the service provider title in the service provider class name and the service provider info class name
 *     Anass Radouani       - Use the service provider title in the service provider class name and the service provider info class name
 *     
 *******************************************************************************/
/]

[module serviceProviderServices('http://org.eclipse.lyo/oslc4j/adaptorInterface')/]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]

[comment TODO: we should avoid relying on "eContainer", since objects that come from a composing emf file, will not have the eContainer relationship setup as expected.
This method should be able to work even for objects that come from a differnet emf file than that containing the AdaptorInterface. 
You should also question any other use of "eContainer" in this whole project /]
[query public containingAdaptorInterface(aServiceProvider : ServiceProvider) : AdaptorInterface =
aServiceProvider.eContainer(AdaptorInterface)
/]

[comment Services for serviceProviderService /]
[query public javaClassPackageNameForService(aServiceProvider : ServiceProvider) : String = 
javaClassBaseNamespace(containingAdaptorInterface(aServiceProvider)).concat('.services')
/]

[query public javaClassNameForService(aServiceProvider : ServiceProvider) : String = 
aServiceProvider.title.substituteAll(' ', '').toUpperFirst().concat('ServiceProviderService')
/]

[query public javaClassFullNameForService(aServiceProvider : ServiceProvider) : String = 
javaClassPackageNameForService(aServiceProvider).concat('.').concat(javaClassNameForService(aServiceProvider))
/]

[query public javaClassFullFileNameForService(aServiceProvider : ServiceProvider) : String = 
javaFilesBasePath(containingAdaptorInterface(aServiceProvider)).concat(javaClassPackageNameForService(aServiceProvider).substituteAll('.', '/')).concat('/').concat(javaClassNameForService(aServiceProvider)).concat('.java')
/]

[comment Services for ServiceProviderInfo /]
[query public javaClassPackageNameForServiceProviderInfo(aServiceProvider : ServiceProvider) : String = 
javaClassBaseNamespace(containingAdaptorInterface(aServiceProvider))
/]

[query public javaClassNameForServiceProviderInfo(aServiceProvider : ServiceProvider) : String = 
aServiceProvider.title.substituteAll(' ', '').toUpperFirst().concat('ServiceProviderInfo')
/]

[query public javaClassFullNameForServiceProviderInfo(aServiceProvider : ServiceProvider) : String = 
javaClassPackageNameForServiceProviderInfo(aServiceProvider).concat('.').concat(javaClassNameForServiceProviderInfo(aServiceProvider))
/]

[query public javaClassFullFileNameForServiceProviderInfo(aServiceProvider : ServiceProvider) : String = 
javaFilesBasePath(containingAdaptorInterface(aServiceProvider)).concat(javaClassPackageNameForServiceProviderInfo(aServiceProvider).substituteAll('.', '/')).concat('/').concat(javaClassNameForServiceProviderInfo(aServiceProvider)).concat('.java')
/]

[query public serviceBaseURI (aServiceProvider : ServiceProvider) : String = 
(if (not aServiceProvider.serviceNamespace.oclIsUndefined())._and(not aServiceProvider.serviceNamespace.equalsIgnoreCase('')) then
    aServiceProvider.serviceNamespace
else
    'serviceProviders'
endif)
/]

[query public collectionURISegment (aServiceProvider : ServiceProvider) : String = 
    ''
/]

[query public collectionURI (aServiceProvider : ServiceProvider) : String = 
    JAXRSConcatURISegments(serviceBaseURI (aServiceProvider), collectionURISegment (aServiceProvider))
/]

[query public instanceURISegment (aServiceProvider : ServiceProvider) : String = 
    (if (not aServiceProvider.instanceID.oclIsUndefined())._and(not aServiceProvider.instanceID.equalsIgnoreCase('')) then
        aServiceProvider.instanceID
    else
        '{serviceProviderId}'
    endif)
/]

[query public instanceURI (aServiceProvider : ServiceProvider) : String = 
    JAXRSConcatURISegments(aServiceProvider.serviceBaseURI(), aServiceProvider.instanceURISegment())
/]

[query public instanceCompositeID (aServiceProvider : ServiceProvider) : Sequence(String) = 
    JAXRSPathParameters(aServiceProvider.instanceURI())
/]

[template public instanceJAXRSMethodSignature(aServiceProvider : ServiceProvider)] 
[for (aPathParameter: String | JAXRSPathParameters(aServiceProvider.instanceURI())) separator(', ')]@PathParam("[aPathParameter /]") final String [aPathParameter /][/for]
[/template]

[template public instanceMethodSignature(aServiceProvider : ServiceProvider)] 
[for (instanceCompositeID: String | instanceCompositeID(aServiceProvider)) separator(', ')]final String [instanceCompositeID /][/for]
[/template]

[template public instanceMethodParameterList(aServiceProvider : ServiceProvider)] 
[for (instanceCompositeID: String | aServiceProvider.instanceCompositeID()) separator(', ')][instanceCompositeID /][/for]
[/template]
