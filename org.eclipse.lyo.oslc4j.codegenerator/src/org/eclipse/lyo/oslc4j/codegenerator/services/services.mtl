[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *	   Matthieu Helleboid	- Use of Adapator Interface Generator
 *	   						- Retrieve generation information using EAttribute, EOpertion and EAnnotation
 *	   Anass Radouani		- Use of Adapator Interface Generator
 *	   						- Retrieve generation information using EAttribute, EOpertion and EAnnotation
 *     
 *******************************************************************************/
/]

[module services('http://org.eclipse.lyo/oslc4j/adaptorInterface', 'http://org.eclipse.lyo/oslc4j/adaptorInterfaceGenerator', 'http://www.eclipse.org/emf/2002/Ecore')/]

[query public javaClassBaseNamespace(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String = 
findValue(anAdaptorInterfaceGenerator, 'javaClassBaseNamespace')
/]

[query public javaFilesBasePath(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String = 
findValue(anAdaptorInterfaceGenerator, 'javaFilesBasePath')
/]

[query public jspFilesBasePath(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String =
findValue(anAdaptorInterfaceGenerator, 'jspFilesBasePath') 
/]

[query public javascriptFilesBasePath(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String =
findValue(anAdaptorInterfaceGenerator, 'javascriptFilesBasePath') 
/]

[query public webApplicationBasePath(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String =
findValue(anAdaptorInterfaceGenerator, 'webApplicationBasePath') 
/]

[query public applicationName(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String =
findValue(anAdaptorInterfaceGenerator, 'applicationName') 
/]

[query public jspFilesWebappPath(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator) : String = 
'/'.concat(javaClassBaseNamespace(anAdaptorInterfaceGenerator)).substituteAll('.', '/')
/]

[query public JAXRSPathAnnotation(pathAnnotation : String) : String = 
    (if (pathAnnotation.size() >= 1) then 
        '@Path("'.concat(pathAnnotation).concat('")')
    else 
        ''
    endif)
/]

[query public JAXRSPathParameters(uriSegment : String) : Sequence(String) = 
uriSegment.tokenize('}')
    ->select(token : String | token.index('{') <> -1)
    ->collect(token : String | token.substring(token.index('{')+1))
/]

[query private stripURISegmentEnd(URISegment : String) : String = 
(if (URISegment.size() = 0) then 
     URISegment
else 
    (if (URISegment.size() = 1) then 
         (if (URISegment.endsWith('/')) then '' else URISegment endif)
    else 
        URISegment.substring(1, URISegment.size()-(if (URISegment.endsWith('/')) then 1 else 0 endif))
    endif)
endif)
/]

[query private stripURISegmentStart(URISegment : String) : String = 
(if (URISegment.size() = 0) then 
     URISegment
else 
    (if (URISegment.size() = 1) then 
         (if (URISegment.startsWith('/')) then '' else URISegment endif)
    else 
        URISegment.substring((if (URISegment.startsWith('/')) then 2 else 1 endif), URISegment.size())
    endif)
endif)
/]

[query public JAXRSConcatURISegments(leftURISegment : String, rightURISegment : String) : String = 
(if (stripURISegmentEnd(leftURISegment).size() = 0) then 
    stripURISegmentStart(rightURISegment) 
else 
    (if (stripURISegmentStart(rightURISegment).size() = 0) then 
        stripURISegmentEnd(leftURISegment) 
    else 
        stripURISegmentEnd(leftURISegment).concat('/').concat(stripURISegmentStart(rightURISegment)) 
    endif)
endif)
/]

[query public commaSeparate(commaSeparatedString : String, prependIfNotEmpty : Boolean, appendIfNotEmpty : Boolean) : String = 
(if prependIfNotEmpty._and(commaSeparatedString.size() > 0) then ', ' else ''endif)
.concat(commaSeparatedString)
.concat(
(if appendIfNotEmpty._and(commaSeparatedString.size() > 0) then ' ,' else ''endif)
)
/]

[comment Retrieve Value from EAttribute with the same name if exist or with metaValue if not/]
[query public findValue(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, key : String) : String = 
let feature : EStructuralFeature = anAdaptorInterfaceGenerator.eClass().eAllAttributes->select(
 f : EAttribute | f.name = key)->first() in
if not feature.oclIsUndefined() then
	anAdaptorInterfaceGenerator.eGet(feature)
else
	metaValue(anAdaptorInterfaceGenerator, key, Sequence{})
endif
/]

[comment Retrieve Value from an EAttribute using EAnnotations, if not found call metaOperationValue /]
[query public metaValue(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, annotation : String, keys : Sequence(OclAny)) : String = 
let feature : EAttribute = anAdaptorInterfaceGenerator.eClass().eAllAttributes->select(
	f : EAttribute | f.eAnnotations->exists(e : EAnnotation | e.source = annotation)
	)->first() in
	if not feature.oclIsUndefined() then
			anAdaptorInterfaceGenerator.eGet(feature)
	else
		metaOperationValue(anAdaptorInterfaceGenerator, annotation, keys)
	endif
/]

[comment Retrieve Value from an EOperation /]
[query public metaOperationValue(anAdaptorInterfaceGenerator : AdaptorInterfaceGenerator, annotation : String, keys : Sequence(OclAny)) : String = 
let operation : EOperation = anAdaptorInterfaceGenerator.eClass().eAllOperations->select(
	f : EOperation | f.eAnnotations->exists(e : EAnnotation | e.source = annotation)
	)->first() in
	if not operation.oclIsUndefined() then
		invokeJava(anAdaptorInterfaceGenerator.oclAsType(EObject), operation, keys).oclAsType(String)
	else
		''
	endif
 /]

[comment  Helper invoking EOperation /]
[query public invokeJava(eobject : EObject, eoperation : EOperation, arg : Sequence(OclAny)) : OclAny =  
invoke('org.eclipse.lyo.oslc4j.codegenerator.services.Services', 'invoke(org.eclipse.emf.ecore.EObject,org.eclipse.emf.ecore.EOperation,java.util.Collection)', Sequence{eobject,eoperation,arg})
/]
