[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury       - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid  - Add Service Provider title to getServiceProviderInfos method
 *						   - Add Specific methods for each managed Resource that has its service namespace relative to Service Provider
 *						   - Import the Service Provider Catalog Singleton and SP resources
 *     					   - Use of Adapator Interface Generator
 *						   - Keep relevant method for the core plugin
 *     Anass Radouani      - Add Service Provider title to getServiceProviderInfos method
 *						   - Add Specific methods for each managed Resource that has its service namespace relative to Service Provider
 *						   - Import the Service Provider Catalog Singleton and SP resources
 *     					   - Use of Adapator Interface Generator
 *						   - Keep relevant method for the core plugin
 *******************************************************************************/
/]

[module generateAdaptorManager('http://org.eclipse.lyo/oslc4j/adaptorInterface', 'http://org.eclipse.lyo/oslc4j/adaptorInterfaceGenerator', 'http://org.eclipse.lyo/oslc4j/emf')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderCatalogServices/]

[template public generateAdaptorManager(aCoreGenerator : OSLC4EMFCoreGenerator)]
[file (aCoreGenerator.javaClassFullFileNameForAdaptorManager(), false, 'UTF-8')]
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury       - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid  - Add Service Provider title to getServiceProviderInfos method
 *						   - Add Specific methods for each managed Resource that has its service namespace relative to Service Provider
 *						   - Import the Service Provider Catalog Singleton and SP resources
 *     Anass Radouani      - Add Service Provider title to getServiceProviderInfos method
 *						   - Add Specific methods for each managed Resource that has its service namespace relative to Service Provider
 *						   - Import the Service Provider Catalog Singleton and SP resources
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package [javaClassPackageNameForAdaptorManager(aCoreGenerator.oclAsType(AdaptorInterfaceGenerator)) /];

import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import [javaClassFullNameForSingleton(aCoreGenerator.adaptorInterface.serviceProviderCatalog, aCoreGenerator.oclAsType(AdaptorInterfaceGenerator)) /];

// [protected ('imports')]
// [/protected]


// [protected ('pre_class_code')]
// [/protected]

public class [javaClassNameForAdaptorManager(aCoreGenerator.adaptorInterface) /] {

	// [protected ('class_attributes')]
	// [/protected]
	
	// [protected ('class_methods')]
	// [/protected]


    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
		[comment TODO: {PATTERNS} there could be a pattern we can further develop on for file-based vs. database/web base tools.
		A pattern on how to esablish the connection between the adaptor and the tool.		
		For file-based tools, you would want to establish a single connection between the adaptor and the tool, 
		with which you can handle all calls from all users/sessions. Otherwise, it is a challenge if 2 sessions/connections
		want to access the same file. Such tools are not made for multiple users at the same time.
		Such single connection can be created here in contextInitialized.
		For web/database-based tools, you would want to establish a connection from adaptor to tool for each session/tool.
		Such tools are used to handle multiple connections from different users at the same time.
		The model for how to establish such session-based connections can be borrowed from the Lyo CM Workshop.
		/]
		// TODO Implement code to establish connection to data backbone etc ...
		// [protected ('contextInitializeServletListener')]
		// [/protected]
    }

	public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
	{
		// TODO Implement code to shutdown connections to data backbone etc...
		// [protected ('contextDestroyed')]
		// [/protected]
	}

}

[/file]
[/template]
